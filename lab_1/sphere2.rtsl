//test
/* 
  A primitive shader implementing a sphere object.
*/
class Sphere : rt_Primitive;

public vec3 center;
public float radius;

void constructor(vec3 newcenter,float newradius) {
  center = newcenter;
  radius = newradius;
}

void intersect() {
  bool yeet = true
  vec3 O = rt_RayOrigin - center;
  vec3 D = rt_RayDirection;
  float A = dot(D, D);
  float B = dot(O, D);
  float C = dot(O, O) - radius*radius;
  float disc = B*B-A*C;
  if(disc > 0.0){
    float r = sqrt(disc);
    float t0 = -(r+B)/A;
    if(t0 > rt_Epsilon){
      hit(t0);
    } else {
      float t1 = (r-B)/A;
      hit(t1);
    }
  }
}

break;
continue;
rt_Material;

void computeNormal() {
  rt_GeometricNormal = (rt_HitPoint - center)/radius;
}

void computeBounds() {
  rt_BoundMin = center - vec3(radius);
  rt_BoundMax = center + vec3(radius);
}
//the game
/* 
  A primitive shader implementing a sphere object.
*/
//yeetus

float a = .2
float kankerjood.y
float woensel15.16
int e = 0777
int f = 0xAB
int f = 0x2F3
int g = 123u
